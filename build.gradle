plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.openapi.generator" version "7.7.0"
}

group = 'com.github.kellyihyeon'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // QueryDsl
    // 필수
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation "com.querydsl:querydsl-core:5.1.0"

    // QueryDsl 쿼리 타입 생성 (QClass 생성 시 @Entity 탐색)
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"

    // java.lang.NoClassDefFoundError:javax/persistence/Entity 에러 방지
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    // utility
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // openapi generator
    implementation "org.openapitools:openapi-generator:7.7.0"
}

openApiGenerate {
    generatorName = "spring"
    inputSpec="${projectDir}/src/main/resources/openapi.yaml"
    outputDir = "${projectDir}/src/main"
    configFile = "${projectDir}/src/main/resources/config.json"
    configOptions = [
            "dateLibrary"    : "spring",
            "useSpringBoot3" : "true",
            "openApiNullable" : "false",
            "sourceFolder" : "openapi-generated",
            "interfaceOnly" : "true",
            "useBeanValidation" : "true",
            "performBeanValidation" : "true",
    ]
}

tasks.named("openApiGenerate") {

    it -> it.doFirst {
        delete("${projectDir}/src/main/openapi-generated")
    }

    it.doLast {
        delete("${projectDir}/src/main/pom.xml")
        delete("${projectDir}/src/main/README.md")
        delete("${projectDir}/src/main/.openapi-generator-ignore")
        delete("${projectDir}/src/main/.openapi-generator")
    }
}

tasks.named('compileJava') {
    it -> it.dependsOn(tasks.named('openApiGenerate'))
}

tasks.named('processResources') {
    it -> it.dependsOn(tasks.named('openApiGenerate'))
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/openapi-generated']
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
